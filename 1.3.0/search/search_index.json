{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#ampligone","title":"AmpliGone","text":"<p>AmpliGone is a tool which accurately finds and removes primer sequences from NGS reads in an amplicon experiment.</p> <p>In contrast to a lot of other primer-removal tools, AmpliGone does not actively look for primer sequences within the NGS reads. Instead, reads are trimmed based on primer sequence coordinates in relation to a given reference sequence. Additionally, AmpliGone is able to compensate for, and therefore properly clean, reads that start or end outside of a primer-region as this is a common occurrence in amplicon-based sequencing data.</p> <p>AmpliGone is build and tested with Nanopore and Illumina data (fastq) in mind and supports both 'end-to-end' as well as 'end-to-mid' amplicons to be cleaned. Please see this page to learn more about this terminology.</p> <p>Please see the installation instructions page in order to get started quickly, or see our user guide page to learn how to best use AmpliGone for your analysis.</p> <p>AmpliGone is freely available under the AGPLv3 licence </p>"},{"location":"amplicon-types/","title":"Amplicon Types","text":"<p>AmpliGone requires user information when it comes to the 'amplicon type'. This describes the length of a PCR amplicon, and which part of said amplicon is actually sequenced. This information is required because it tells AmpliGone from which side(s) of a read the primer-sequence has to be removed.</p> <p>The given options are \"End-to-End\", \"End-to-Mid\", and \"Fragmented\".</p>"},{"location":"amplicon-types/#end-to-end","title":"End-to-End","text":"<p>An \"End-to-End\" amplicon type describes the situation where a read covers the full length of an amplicon. This is most prominent in, but not exclusive to, long read sequencing platforms such as Nanopore. In this case of an \"End-to-End\" amplicon type, primers need to be removed from both ends of a read.</p> <p></p> <p>When given the \"End-to-End\" amplicon type, AmpliGone follows the logic that both forward and reverse reads should start at a forward-primer and stop at a reverse-primer. The orientation of the reads doesn't matter in this case.</p>"},{"location":"amplicon-types/#end-to-mid","title":"End-to-Mid","text":"<p>An \"End-to-Mid\" amplicon type describes the situation where a reads cover the amplicon only partially, and partially overlap in the amplicon mid-point. This is most prominent in, but not exclusive to, short read Illumina sequencing. In this case of an \"End-to-Mid\" amplicon type, primers need to be removed from only one end of a read.</p> <p></p> <p>When given the \"End-to-Mid\" amplicon type, AmpliGone follows the logic that a forward-read may only start at a forward-primer. And a reverse-read may only start at at a reverse-primer.</p>"},{"location":"amplicon-types/#fragmented","title":"Fragmented","text":"<p>A \"Fragmented\" amplicon type describes the situation where multiple smaller reads cover one larger amplicon. This is prominent, but not exclusive to, short read Illumina sequencing of larger amplicons. In this case of a \"Fragmented\" amplicon type, primers need to be removed from reads that can be linked directly to a primer region.  </p> <p></p> <p>When given the \"Fragmented\" amplicon type, AmpliGone follows the logic that both forward and reverse reads can contain a primer sequence. But reads don't necessarily have to start at a primer location. A \"fragment lookaround size\" is used to determine whether or not a read is related to a primer location, the default value for this is 10bp, meaning that AmpliGone will assume a read is related to a primer position if it starts or ends within 10bp of the primer position.  This value can be changed with the <code>--fragment-lookaround-size</code> flag.</p>"},{"location":"amplicon-types/#why-is-a-more-common-terminology-not-used","title":"Why is a more common terminology not used?","text":"<p>Because we quickly found out that more common terminology such as paired-end/single-end, or short/long read, doesn't always convey the information that AmpliGone needs in a single keyword or argument. And information such as a sequencing platform doesn't always convey this information either.</p> <p>As an example: it's most common that primers are only present on one side of a read if the sequencing was performed with \"short reads\" on an Illumina platform. But that's not necessarily always the case, because depending on the actual experiment setup the primers might actually be on both ends of those short reads.</p> <p>With AmpliGone we wanted a way to actually get the information that is required and matches with an experiment design, without the user having to give multiple pieces of information through various command-line arguments.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#130-2023-08-08","title":"1.3.0 (2023-08-08)","text":""},{"location":"changelog/#features","title":"Features","text":"<ul> <li>allow multi-fasta reference input (cd4f413)</li> <li>primer removal process now works with reference-specific primer coordinates (7a1a899)</li> </ul>"},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>add a default value of 0 to min() to avoid a ValueError when an empty list is provided (c23301f)</li> </ul>"},{"location":"changelog/#121-2023-02-28","title":"1.2.1 (2023-02-28)","text":""},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>Fix extension checking for cli arguments (015e10d)</li> <li>fix pandas version string in setup.py install_requires (d0a40f0)</li> <li>split file extension checking for input and output files (c5cc43a)</li> <li>update permissions for GH-actions workflows (59fead2)</li> <li>use log.warning() instead of the deprecated log.warn() (87685f6)</li> </ul>"},{"location":"changelog/#documentation","title":"Documentation","text":"<ul> <li>add citation file (59fead2)</li> <li>update conda installation badge (d88f4f4)</li> </ul>"},{"location":"changelog/#120-2022-12-20","title":"1.2.0 (2022-12-20)","text":""},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>add support for fragmented amplicon reads with the <code>--amplicon-type fragmented</code> mode (9d5559b)</li> </ul>"},{"location":"changelog/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>only check the last file extension to see for a fastq or bam file (fixes check for file with multiple dots in the filename) (386fb1f)</li> <li>print the correct coordinates when a primer is found multiple times on the reverse strand (420438c)</li> </ul>"},{"location":"changelog/#documentation_1","title":"Documentation","text":"<ul> <li>update docstrings (c8af27a)</li> <li>update readme (0287408)</li> <li>update user documentation to include the new \"fragmented\" amplicon-type (159366e)</li> </ul>"},{"location":"changelog/#110-2022-08-11","title":"1.1.0 (2022-08-11)","text":""},{"location":"changelog/#features_2","title":"Features","text":"<ul> <li>output some basic stats in the log (c5ad032)</li> <li>use <code>rich</code> as a logging handler to improve logging with timestamps and various information levels. (c5ad032)</li> </ul>"},{"location":"changelog/#dependencies","title":"Dependencies","text":"<ul> <li>add <code>rich</code> as a dependency (c5ad032)</li> <li>change parmap version to lenient version 1.5.x (0c4d2a5)</li> <li>remove <code>tqdm</code> as a dependency (c5ad032)</li> <li>update mappy to latest version 2.24 (efed0a1)</li> <li>update pandas to &gt;=1.3 (efed0a1)</li> <li>update parmap to latest version 1.5.3 (efed0a1)</li> <li>update pysam to lenient version 0.19.* (efed0a1)</li> <li>updated environment recipe and setup.py to newest dependencies (efed0a1)</li> </ul>"},{"location":"changelog/#103-2022-07-12","title":"1.0.3 (2022-07-12)","text":""},{"location":"changelog/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>ci: Use other access key in order to trigger publishing workflow (384625e)</li> </ul>"},{"location":"changelog/#102-2022-07-12","title":"1.0.2 (2022-07-12)","text":""},{"location":"changelog/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>Fix cutting reverse primers too short (a01c69d)</li> <li>FWSet and RVSet are now different objects (a28d629)</li> </ul>"},{"location":"changelog/#documentation_2","title":"Documentation","text":"<ul> <li>ci: update mkdocs config to support tabbed content (bdfb52d)</li> <li>restructured user guide page, clarified some sections and added many more example commands for reference (d723b97)</li> <li>rewritten installation page with clarified instructions and added conda instructions (271a0a8)</li> <li>update documentation site landing page (45a3fca)</li> <li>update readme with quick installation instructions (bdfb52d)</li> </ul>"},{"location":"changelog/#101-2022-04-14","title":"1.0.1 (2022-04-14)","text":""},{"location":"changelog/#continuous-integration","title":"Continuous Integration","text":"<ul> <li>update github actions workflow, split package upload to separate workflow (77c13a1)</li> </ul>"},{"location":"changelog/#100-2022-04-14","title":"1.0.0 (2022-04-14)","text":""},{"location":"changelog/#breaking-changes","title":"\u26a0 BREAKING CHANGES","text":"<ul> <li>Export BED file of cut primers</li> </ul>"},{"location":"changelog/#features_3","title":"Features","text":"<ul> <li>Add support for BED file input (eaa60a0)</li> <li>Export BED file of cut primers (f51d222)</li> </ul>"},{"location":"changelog/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>Add seq and revseq to coordinatelist (eb27331)</li> <li>Fix parsing error rate from cli (28976f2)</li> <li>Fix parsing of \".\" in score column (cc6913b)</li> <li>Fix running fasta2bed script (f8545a4)</li> <li>Output empty bed if no primers are found (ca67b0b)</li> </ul>"},{"location":"changelog/#dependencies_1","title":"Dependencies","text":"<ul> <li>update all python versions mentions to 3.8 (89ced9c)</li> </ul>"},{"location":"changelog/#documentation_3","title":"Documentation","text":"<ul> <li>add docstrings to <code>AmpliGone.mappreset</code> (6d9c32c)</li> <li>add docstrings to functions in <code>AmpliGone.AmpliGone</code> (54a0a01)</li> <li>add docstrings to functions in AmpliGone.fasta2bed (ea2d5c6)</li> <li>add docstrings to functions in AmpliGone.io_ops (d9c60ae)</li> <li>Update installation instructions (fbb7e0e)</li> <li>Update user guide (071e71f)</li> </ul>"},{"location":"changelog/#043-2022-02-03","title":"0.4.3 (2022-02-03)","text":""},{"location":"changelog/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>remove unnecessary print statement (c7bd712)</li> </ul>"},{"location":"changelog/#documentation_4","title":"Documentation","text":"<ul> <li>add <code>--error-rate</code> flag to user guide documentation (9db3848)</li> </ul>"},{"location":"changelog/#042-2022-02-03","title":"0.4.2 (2022-02-03)","text":""},{"location":"changelog/#features_4","title":"Features","text":"<ul> <li>allow the primer-search error rate to be set by the user (fddd94a)</li> </ul>"},{"location":"changelog/#041-2022-02-02","title":"0.4.1 (2022-02-02)","text":""},{"location":"changelog/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>don't report duplicate coordinates of same primer when ambiguity-primers are given (f5449e2)</li> <li>use Nonetypes instead of string \"None\" (f5449e2)</li> </ul>"},{"location":"changelog/#040-2022-01-27","title":"0.4.0 (2022-01-27)","text":""},{"location":"changelog/#features_5","title":"Features","text":"<ul> <li>find coordinates of primers with mismatches to reference (d6bf925)</li> </ul>"},{"location":"changelog/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>consistently remove reverse primers in end-to-end mode (0c4f621)</li> <li>Fix cutting too many bases (78bd9ea)</li> <li>Make number of iterations variable (62ac2d7)</li> </ul>"},{"location":"changelog/#documentation_5","title":"Documentation","text":"<ul> <li>update installation instructions and include primer-search changes (5fdc6fa)</li> </ul>"},{"location":"changelog/#033-2021-12-08","title":"0.3.3 (2021-12-08)","text":""},{"location":"changelog/#bug-fixes_9","title":"Bug Fixes","text":"<ul> <li>solve preset-sampling crash when less than 3 input reads are provided (29d5624)</li> <li>solve reference before assignment error in end-to-mid mode (14c9d24)</li> </ul>"},{"location":"changelog/#032-2021-11-26","title":"0.3.2 (2021-11-26)","text":""},{"location":"changelog/#bug-fixes_10","title":"Bug Fixes","text":"<ul> <li>report removed coordinates from all iterations (f726e9a)</li> </ul>"},{"location":"changelog/#031-2021-11-25","title":"0.3.1 (2021-11-25)","text":""},{"location":"changelog/#bug-fixes_11","title":"Bug Fixes","text":"<ul> <li>Distinguish (mis)match and cut soft clips (d4132c1)</li> </ul>"},{"location":"changelog/#performance-improvements","title":"Performance Improvements","text":"<ul> <li>Add minimap scoring to presets (11158e5)</li> </ul>"},{"location":"changelog/#030-2021-11-17","title":"0.3.0 (2021-11-17)","text":""},{"location":"changelog/#features_6","title":"Features","text":"<ul> <li>Use CIGAR strings to cut end-to-end (ebd2684)</li> </ul>"},{"location":"changelog/#bug-fixes_12","title":"Bug Fixes","text":"<ul> <li>Fix typo in 75e792fa8d69746 (eca004b)</li> <li>only return data that got an alignment-hit (f9e64e8)</li> </ul>"},{"location":"changelog/#performance-improvements_1","title":"Performance Improvements","text":"<ul> <li>Improved (fastq)data loading speed (9d1ae23)</li> </ul>"},{"location":"changelog/#documentation_6","title":"Documentation","text":"<ul> <li>Fix comment in cut_read function (b920738)</li> <li>update docs to match new primer removal process (035be92)</li> <li>update readme (95ff984)</li> </ul>"},{"location":"changelog/#023-2021-10-28","title":"0.2.3 (2021-10-28)","text":""},{"location":"changelog/#bug-fixes_13","title":"Bug Fixes","text":"<ul> <li>set correct exit code when <code>-to</code> flag is given (5a93ff0)</li> </ul>"},{"location":"changelog/#022-2021-10-27","title":"0.2.2 (2021-10-27)","text":""},{"location":"changelog/#bug-fixes_14","title":"Bug Fixes","text":"<ul> <li>add missing primer-orientation keywords (41a84e6)</li> <li>exit cleanly when primers aren't found (#11) (e927591)</li> <li>Exit cleanly with empty input (#12) (35aae65)</li> </ul>"},{"location":"changelog/#documentation_7","title":"Documentation","text":"<ul> <li>update user-guide to include newly added flag (4d28ac1)</li> </ul>"},{"location":"changelog/#021-2021-10-25","title":"0.2.1 (2021-10-25)","text":""},{"location":"changelog/#documentation_8","title":"Documentation","text":"<ul> <li>add changelog link (4b62a92)</li> </ul>"},{"location":"installation/","title":"Installation instructions","text":"<p>AmpliGone is only available on Linux (or Linux-based) operating systems. MacOS may also work but is not tested. AmpliGone will not work on Windows.</p> <p>AmpliGone can be installed easily with Conda or pip.</p>"},{"location":"installation/#installation-with-conda","title":"Installation with conda","text":"<p>AmpliGone releases are published in Bioconda, and can be installed with the following command:</p> <pre><code>conda install -c bioconda ampligone\n</code></pre> <p>Tip</p> <p>You can also use <code>mamba</code> as a replacement for installing conda packages, use the following command if you have <code>mamba</code> installed on your system <pre><code>mamba install -c bioconda ampligone\n</code></pre></p> <p>Installation through conda/mamba is the recommended method for installing AmpliGone</p>"},{"location":"installation/#installation-with-pip","title":"Installation with pip","text":"<p>AmpliGone releases are also published on PyPI, and can be installed using pip using the following command:</p> <pre><code>pip install AmpliGone\n</code></pre>"},{"location":"installation/#download-and-installation-from-source","title":"Download and installation from source","text":"<p>Make a new Conda environment before continuing</p> <p>If you have Conda installed on your system, please create and activate a new environment before continuing.</p> <p>Use the following command to create and activate a new Conda environment named \"AmpliGone\" based on the environment-recipe we provide in the github-repository</p> <pre><code>conda env create -f env.yml; conda activate AmpliGone\n</code></pre> <p>The \"AmpliGone\" conda-environment should now be active</p> <p>First start by cloning the repository and make sure you're on the latest released version of AmpliGone, then install the downloaded package with pip:</p> <pre><code># clone the repository from github and switch to the latest released version\ngit clone https://github.com/RIVM-bioinformatics/AmpliGone.git; cd AmpliGone; git checkout tags/$(git tag --sort=committerdate | tail -1) &gt;&gt; /dev/null\n# Install the downloaded package with pip\npip install .\n</code></pre> <p>AmpliGone should now be installed! You can verify if installation was successful by typing <code>ampligone --version</code> on the command-line, this should show the installed AmpliGone version.</p>"},{"location":"installation/#pipelineworkflow-integration","title":"Pipeline/workflow integration","text":"<p>You can easily integrate AmpliGone in your SnakeMake or Nextflow bioinformatics workflow if you use Conda environments in your workflow.</p> <p>To do this, add <code>ampligone</code> and the correct channels to your conda-environment recipe as below:</p> <pre><code>name: example-env\nchannels:\n- bioconda\n- conda-forge\n- anaconda\n- defaults\ndependencies:\n- ampligone\n</code></pre> <p>Conda will now install AmpliGone and its dependencies in the specified snakemake conda-environment.</p>"},{"location":"user-guide/","title":"User Guide","text":"<p>AmpliGone works with both reads in FASTQ format, as well as aligned data in BAM-format. However, when data is presented in the BAM-format then only read-data (sequence and quality scores) will be used. Other data present in the BAM-format will not be used in this version of AmpliGone.</p> <p>Currently, AmpliGone supports Nanopore data and Illumina data. The Illumina platform (NextSeq/MiSeq/HiSeq/other) does not matter.</p> <p>It is however important that you know the read-length in relation to the amplicon length. AmpliGone expects this information in the form of an 'amplicon-type'. Please see this page for more information regarding supported amplicon-types.</p>"},{"location":"user-guide/#preparing-input-data","title":"Preparing input data","text":"<p>For optimal results we ask you to format your inputs to make sure you get the best results in your analysis.</p> <p>It is required that adapters/barcodes have been removed from your sequencing reads before they are processed by AmpliGone. Processing read-data with adapters/barcodes still attached to your reads may result in inaccurate output data.</p> <p>Additionally, AmpliGone works best with reads that have already been processed by quality filtering tools such as fastp or Trimmomatic.</p>"},{"location":"user-guide/#primers","title":"Primers","text":"<p>AmpliGone has two options for primer input: BED and fasta. The BED format specifies the coordinates of the primers with respect to the given reference genome. If this is the format you use, you can skip to Primer Orientation</p> <p>When the primers are supplied in fasta format, AmpliGone searches for the primer coordinates based on the given reference. By default, mismatches are tolerated for up to 10% (0.1) of the length of the primer sequence. It's therefore important that the given primers adequately match the given reference, otherwise the primer-coordinates cannot be determined.</p> <p>If necessary, you can adjust the maximum amount of differences (substitutions) which are tolerated to be either more lenient or stringent. You can do so by giving the <code>--error-rate</code>/ <code>-er</code> flag in your command, followed by a decimal number. For example <code>--error-rate 0.15</code> can be used to make the search more lenient. Please see the usage examples to see this flag in combination with other settings for AmpliGone.</p>"},{"location":"user-guide/#primer-orientation","title":"Primer Orientation","text":"<p>AmpliGone determines whether a given sequence is considered to be a 'forward primer' or a 'reverse primer'. This information is taken from the name of a primer sequence in the FASTA header with specific keywords, the usable keywords are as follows:</p> Usable keywordsExample fasta Forward primers Reverse primers LEFT RIGHT PLUS MINUS POSITIVE NEGATIVE FORWARD REVERSE <pre><code>&gt;primer_1_LEFT\nACTGGC\n&gt;primer_1_RIGHT\nTGGCTCA\n&gt;primer_2_FORWARD\nACAATTCG\n&gt;primer_2_REVERSE\nTATTAAGC\n</code></pre> <p>The primer sequences may contain IUPAC ambiguity nucleotides, though be aware that this may result in differently found coordinates as expected depending on your experiments.</p>"},{"location":"user-guide/#reference","title":"Reference","text":"<p>Unlike the primer sequences, AmpliGone currently only supports a reference sequence that does not contain IUPAC ambiguity nucleotides. This may change in a future version.</p>"},{"location":"user-guide/#exporting-found-primer-coordinates","title":"Exporting found primer coordinates","text":"<p>In a downstream analysis you might want to know which primers have actually been removed from which coordinates by AmpliGone. AmpliGone can provide you with this information with the <code>--export-primers {file}</code> flag, replace <code>{file}</code> with your desired output file. Using this flag will give you a BED-file with found primer coordinates as in the example below:</p> ref start end name score strand NC_045512.2 30 54 primer_1_LEFT . + NC_045512.2 385 410 primer_1_RIGHT . - NC_045512.2 320 342 primer_2_LEFT . + NC_045512.2 704 726 primer_2_RIGHT . - <p>Please see the usage examples to see this flag in combination with other settings for AmpliGone.</p>"},{"location":"user-guide/#using-multiple-threads","title":"Using multiple threads","text":"<p>AmpliGone is multi-threaded by design, as it splits your input data to process over the amount of threads which are available for use. Therefore, AmpliGone scales (almost) linearly when given more threads. A computer with a lot of computing power is therefore advised.</p> <p>AmpliGone defaults to the amount of threads which are available in your system. (if the CPU of your computer has 24 threads, AmpliGone will use all 24 threads by default) You can use the <code>--threads</code> or <code>-t</code> flag to set a different number of threads to use.</p>"},{"location":"user-guide/#basic-usage-examples","title":"Basic usage examples","text":"End-to-end ampliconsEnd-to-mid ampliconsFragmented amplicons <p>Here you can find various examples to remove primers from \"end-to-end\" amplicon data. Please check what an \"end-to-end\" amplicon is here before continuing.</p> Basic primer removal with a Fasta-file as primer-input <ul> <li>The primers in this command are provided in Fasta format.  </li> <li>The default setting for a primer-mismatches (10%) will be used as no other value is provided in this command.  </li> <li>Aside from basic logging messages, AmpliGone will not output any additional data such as removed primer coordinates.  </li> <li>The flag <code>--threads</code> is not provided in this command, AmpliGone will therefore use all available threads on the system.</li> </ul> <pre><code>ampligone \\\n--input input.fastq \\\n--output output.fastq \\\n--reference reference.fasta \\\n--primers primers.fasta \\\n--amplicon-type end-to-end\n</code></pre> Basic primer removal with a BED-file as primer-input <ul> <li>The primers in this command are provided in BED format.  </li> <li>The default setting for a primer-mismatches (10%) will be used as no other value is provided in this command.  </li> <li>Aside from basic logging messages, AmpliGone will not output any additional data such as removed primer coordinates.</li> <li>The flag <code>--threads 6</code> is given in this command, AmpliGone will therefore use only 6 threads.</li> </ul> <pre><code>ampligone \\\n--input input.fastq \\\n--output output.fastq \\\n--reference reference.fasta \\\n--primers primer_information.bed \\\n--amplicon-type end-to-end \\\n--threads 6\n</code></pre> Primer removal with a BED-file as primer-input and exporting removed primers <ul> <li>The primers in this command are provided in BED format.</li> <li>The default setting for a primer-mismatches (10%) will be used as no other value is provided in this command.  </li> <li>AmpliGone will output both basic logging messages as an extra output file containing the found and removed primer coordinates in BED format.</li> <li>The flag <code>--threads 8</code> is given in this command, AmpliGone will therefore use only 8 threads.</li> </ul> <pre><code>ampligone \\\n--input input.fastq \\\n--output output.fastq \\\n--reference reference.fasta \\\n--primers primer_information.bed \\\n--amplicon-type end-to-end \\\n--export-primers removed_primers.bed \\\n--threads 8\n</code></pre> Primer removal with a Fasta-file as primer-input, using a custom primer mismatch rate and exporting removed primers <ul> <li>The primers in this command are provided in Fasta format.</li> <li>The flag <code>--error-rate 0.2</code> is given in this command, meaning that a primer mismatch rate of 20% will be tolerated by AmpliGone instead of the default 10%</li> <li>AmpliGone will output both basic logging messages as an extra output file containing the found and removed primer coordinates in BED format.</li> <li>The flag <code>--threads 16</code> is given in this command, AmpliGone will therefore use only 16 threads.</li> </ul> <pre><code>ampligone \\\n--input input.fastq \\\n--output output.fastq \\\n--reference reference.fasta \\\n--primers primers.fasta \\\n--amplicon-type end-to-end \\\n--error-rate 0.2 \\\n--export-primers removed_primers.bed \\\n--threads 16\n</code></pre> <p>Here you can find various examples to remove primers from \"end-to-mid\" amplicon data. Please check what an \"end-to-mid\" amplicon is here before continuing.</p> Basic primer removal with a Fasta-file as primer-input <ul> <li>The primers in this command are provided in Fasta format.  </li> <li>The default setting for a primer-mismatches (10%) will be used as no other value is provided in this command.  </li> <li>Aside from basic logging messages, AmpliGone will not output any additional data such as removed primer coordinates.  </li> <li>The flag <code>--threads</code> is not provided in this command, AmpliGone will therefore use all available threads on the system.</li> </ul> <pre><code>ampligone \\\n--input input.fastq \\\n--output output.fastq \\\n--reference reference.fasta \\\n--primers primers.fasta \\\n--amplicon-type end-to-mid\n</code></pre> Basic primer removal with a BED-file as primer-input <ul> <li>The primers in this command are provided in BED format.  </li> <li>The default setting for a primer-mismatches (10%) will be used as no other value is provided in this command.  </li> <li>Aside from basic logging messages, AmpliGone will not output any additional data such as removed primer coordinates.</li> <li>The flag <code>--threads 6</code> is given in this command, AmpliGone will therefore use only 6 threads.</li> </ul> <pre><code>ampligone \\\n--input input.fastq \\\n--output output.fastq \\\n--reference reference.fasta \\\n--primers primer_information.bed \\\n--amplicon-type end-to-mid \\\n--threads 6\n</code></pre> Primer removal with a BED-file as primer-input and exporting removed primers <ul> <li>The primers in this command are provided in BED format.</li> <li>The default setting for a primer-mismatches (10%) will be used as no other value is provided in this command.  </li> <li>AmpliGone will output both basic logging messages as an extra output file containing the found and removed primer coordinates in BED format.</li> <li>The flag <code>--threads 8</code> is given in this command, AmpliGone will therefore use only 8 threads.</li> </ul> <pre><code>ampligone \\\n--input input.fastq \\\n--output output.fastq \\\n--reference reference.fasta \\\n--primers primer_information.bed \\\n--amplicon-type end-to-mid \\\n--export-primers removed_primers.bed \\\n--threads 8\n</code></pre> Primer removal with a Fasta-file as primer-input, using a custom primer mismatch rate and exporting removed primers <ul> <li>The primers in this command are provided in Fasta format.</li> <li>The flag <code>--error-rate 0.2</code> is given in this command, meaning that a primer mismatch rate of 20% will be tolerated by AmpliGone instead of the default 10%</li> <li>AmpliGone will output both basic logging messages as an extra output file containing the found and removed primer coordinates in BED format.</li> <li>The flag <code>--threads 16</code> is given in this command, AmpliGone will therefore use only 16 threads.</li> </ul> <pre><code>ampligone \\\n--input input.fastq \\\n--output output.fastq \\\n--reference reference.fasta \\\n--primers primers.fasta \\\n--amplicon-type end-to-mid \\\n--error-rate 0.2 \\\n--export-primers removed_primers.bed \\\n--threads 16\n</code></pre> <p>Here you can find various examples to remove primers from \"fragmented\" amplicon data. Please check what a \"fragmented\" amplicon is here before continuing.</p> Basic primer removal with a Fasta-file as primer-input <ul> <li>The primers in this command are provided in Fasta format.  </li> <li>The default setting for a primer-mismatches (10%) will be used as no other value is provided in this command.  </li> <li>The default setting for a fragment-lookaround-size (10bp) will be used as no other value is provided in this command. </li> <li>Aside from basic logging messages, AmpliGone will not output any additional data such as removed primer coordinates.  </li> <li>The flag <code>--threads</code> is not provided in this command, AmpliGone will therefore use all available threads on the system.</li> </ul> <pre><code>ampligone \\\n--input input.fastq \\\n--output output.fastq \\\n--reference reference.fasta \\\n--primers primers.fasta \\\n--amplicon-type fragmented\n</code></pre> Basic primer removal with a BED-file as primer-input <ul> <li>The primers in this command are provided in BED format.  </li> <li>The default setting for a primer-mismatches (10%) will be used as no other value is provided in this command.  </li> <li>The default setting for a fragment-lookaround-size (10bp) will be used as no other value is provided in this command.</li> <li>Aside from basic logging messages, AmpliGone will not output any additional data such as removed primer coordinates.</li> <li>The flag <code>--threads 6</code> is given in this command, AmpliGone will therefore use only 6 threads.</li> </ul> <pre><code>ampligone \\\n--input input.fastq \\\n--output output.fastq \\\n--reference reference.fasta \\\n--primers primer_information.bed \\\n--amplicon-type fragmented \\\n--threads 6\n</code></pre> Primer removal with a BED-file as primer-input, using a custom fragment-lookaround-size and exporting removed primers <ul> <li>The primers in this command are provided in BED format.</li> <li>The default setting for a primer-mismatches (10%) will be used as no other value is provided in this command.  </li> <li>The flag <code>--fragment-lookaround-size 15</code> is provided in this command, meaning that fragmentend reads within 15bp of a primer site will be associated with said primer-site and will therefore be cut if necessary.</li> <li>AmpliGone will output both basic logging messages as an extra output file containing the found and removed primer coordinates in BED format.</li> <li>The flag <code>--threads 8</code> is given in this command, AmpliGone will therefore use only 8 threads.</li> </ul> <pre><code>ampligone \\\n--input input.fastq \\\n--output output.fastq \\\n--reference reference.fasta \\\n--primers primer_information.bed \\\n--amplicon-type fragmented \\\n--fragment-lookaround-size 15 \\\n--export-primers removed_primers.bed \\\n--threads 8\n</code></pre> Primer removal with a Fasta-file as primer-input, using a custom primer mismatch rate, a custom fragment-lookaround-size, and exporting removed primers <ul> <li>The primers in this command are provided in Fasta format.</li> <li>The flag <code>--error-rate 0.2</code> is given in this command, meaning that a primer mismatch rate of 20% will be tolerated by AmpliGone instead of the default 10%</li> <li>The flag <code>--fragment-lookaround-size 20</code> is provided in this command, meaning that fragmentend reads within 20bp of a primer site will be associated with said primer-site and will therefore be cut if necessary.</li> <li>AmpliGone will output both basic logging messages as an extra output file containing the found and removed primer coordinates in BED format.</li> <li>The flag <code>--threads 16</code> is given in this command, AmpliGone will therefore use only 16 threads.</li> </ul> <pre><code>ampligone \\\n--input input.fastq \\\n--output output.fastq \\\n--reference reference.fasta \\\n--primers primers.fasta \\\n--amplicon-type fragmented \\\n--fragment-lookaround-size 20 \\\n--error-rate 0.2 \\\n--export-primers removed_primers.bed \\\n--threads 16\n</code></pre>"},{"location":"user-guide/#using-ampligone-in-a-pipelineworkflow","title":"Using AmpliGone in a pipeline/workflow","text":"<p>In pipelines it's often required to that output-files are always created, even if they are empty. AmpliGone has the <code>-to</code> flag for this. Which stands for 'touch-outputs'.</p> <p>When this flag is given, AmpliGone will always create the output-files. Even if AmpliGone would normally fail because of (for example) an empty input file or when primer-sequences couldn't be found on the reference.</p> <p>Please use with caution</p> <p>Using the <code>-to</code> flag will ensure that output-files are always created. But because of this, common errors may go unnoticed more easily. Please test your experiment setup manually before integrating it in a pipeline</p>"}]}