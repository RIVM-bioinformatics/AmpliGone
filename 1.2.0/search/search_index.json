{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AmpliGone \u00b6 AmpliGone is a tool which accurately finds and removes primer sequences from NGS reads in an amplicon experiment. In contrast to a lot of other primer-removal tools, AmpliGone does not actively look for primer sequences within the NGS reads. Instead, reads are trimmed based on primer sequence coordinates in relation to a given reference sequence. Additionally, AmpliGone is able to compensate for, and therefore properly clean, reads that start or end outside of a primer-region as this is a common occurrence in amplicon-based sequencing data. AmpliGone is build and tested with Nanopore and Illumina data (fastq) in mind and supports both 'end-to-end' as well as 'end-to-mid' amplicons to be cleaned. Please see this page to learn more about this terminology. Please see the installation instructions page in order to get started quickly, or see our user guide page to learn how to best use AmpliGone for your analysis. AmpliGone is freely available under the AGPLv3 licence","title":"Home"},{"location":"#ampligone","text":"AmpliGone is a tool which accurately finds and removes primer sequences from NGS reads in an amplicon experiment. In contrast to a lot of other primer-removal tools, AmpliGone does not actively look for primer sequences within the NGS reads. Instead, reads are trimmed based on primer sequence coordinates in relation to a given reference sequence. Additionally, AmpliGone is able to compensate for, and therefore properly clean, reads that start or end outside of a primer-region as this is a common occurrence in amplicon-based sequencing data. AmpliGone is build and tested with Nanopore and Illumina data (fastq) in mind and supports both 'end-to-end' as well as 'end-to-mid' amplicons to be cleaned. Please see this page to learn more about this terminology. Please see the installation instructions page in order to get started quickly, or see our user guide page to learn how to best use AmpliGone for your analysis. AmpliGone is freely available under the AGPLv3 licence","title":"AmpliGone"},{"location":"amplicon-types/","text":"Amplicon Types \u00b6 AmpliGone requires user information when it comes to the 'amplicon type'. This describes the length of a PCR amplicon, and which part of said amplicon is actually sequenced. This information is required because it tells AmpliGone from which side(s) of a read the primer-sequence has to be removed. The given options are \"End-to-End\" , \"End-to-Mid\" , and \"Fragmented\" . End-to-End \u00b6 An \"End-to-End\" amplicon type describes the situation where a read covers the full length of an amplicon. This is most prominent in, but not exclusive to, long read sequencing platforms such as Nanopore. In this case of an \"End-to-End\" amplicon type, primers need to be removed from both ends of a read. When given the \"End-to-End\" amplicon type, AmpliGone follows the logic that both forward and reverse reads should start at a forward-primer and stop at a reverse-primer. The orientation of the reads doesn't matter in this case. End-to-Mid \u00b6 An \"End-to-Mid\" amplicon type describes the situation where a reads cover the amplicon only partially, and partially overlap in the amplicon mid-point. This is most prominent in, but not exclusive to, short read Illumina sequencing. In this case of an \"End-to-Mid\" amplicon type, primers need to be removed from only one end of a read. When given the \"End-to-Mid\" amplicon type, AmpliGone follows the logic that a forward-read may only start at a forward-primer. And a reverse-read may only start at at a reverse-primer. Fragmented \u00b6 A \"Fragmented\" amplicon type describes the situation where multiple smaller reads cover one larger amplicon. This is prominent, but not exclusive to, short read Illumina sequencing of larger amplicons. In this case of a \"Fragmented\" amplicon type, primers need to be removed from reads that can be linked directly to a primer region. When given the \"Fragmented\" amplicon type, AmpliGone follows the logic that both forward and reverse reads can contain a primer sequence. But reads don't necessarily have to start at a primer location. A \"fragment lookaround size\" is used to determine whether or not a read is related to a primer location, the default value for this is 10bp, meaning that AmpliGone will assume a read is related to a primer position if it starts or ends within 10bp of the primer position. This value can be changed with the --fragment-lookaround-size flag. Why is a more common terminology not used? \u00b6 Because we quickly found out that more common terminology such as paired-end/single-end, or short/long read, doesn't always convey the information that AmpliGone needs in a single keyword or argument. And information such as a sequencing platform doesn't always convey this information either. As an example: it's most common that primers are only present on one side of a read if the sequencing was performed with \"short reads\" on an Illumina platform. But that's not necessarily always the case , because depending on the actual experiment setup the primers might actually be on both ends of those short reads. With AmpliGone we wanted a way to actually get the information that is required and matches with an experiment design, without the user having to give multiple pieces of information through various command-line arguments.","title":"Amplicon types"},{"location":"amplicon-types/#amplicon-types","text":"AmpliGone requires user information when it comes to the 'amplicon type'. This describes the length of a PCR amplicon, and which part of said amplicon is actually sequenced. This information is required because it tells AmpliGone from which side(s) of a read the primer-sequence has to be removed. The given options are \"End-to-End\" , \"End-to-Mid\" , and \"Fragmented\" .","title":"Amplicon Types"},{"location":"amplicon-types/#end-to-end","text":"An \"End-to-End\" amplicon type describes the situation where a read covers the full length of an amplicon. This is most prominent in, but not exclusive to, long read sequencing platforms such as Nanopore. In this case of an \"End-to-End\" amplicon type, primers need to be removed from both ends of a read. When given the \"End-to-End\" amplicon type, AmpliGone follows the logic that both forward and reverse reads should start at a forward-primer and stop at a reverse-primer. The orientation of the reads doesn't matter in this case.","title":"End-to-End"},{"location":"amplicon-types/#end-to-mid","text":"An \"End-to-Mid\" amplicon type describes the situation where a reads cover the amplicon only partially, and partially overlap in the amplicon mid-point. This is most prominent in, but not exclusive to, short read Illumina sequencing. In this case of an \"End-to-Mid\" amplicon type, primers need to be removed from only one end of a read. When given the \"End-to-Mid\" amplicon type, AmpliGone follows the logic that a forward-read may only start at a forward-primer. And a reverse-read may only start at at a reverse-primer.","title":"End-to-Mid"},{"location":"amplicon-types/#fragmented","text":"A \"Fragmented\" amplicon type describes the situation where multiple smaller reads cover one larger amplicon. This is prominent, but not exclusive to, short read Illumina sequencing of larger amplicons. In this case of a \"Fragmented\" amplicon type, primers need to be removed from reads that can be linked directly to a primer region. When given the \"Fragmented\" amplicon type, AmpliGone follows the logic that both forward and reverse reads can contain a primer sequence. But reads don't necessarily have to start at a primer location. A \"fragment lookaround size\" is used to determine whether or not a read is related to a primer location, the default value for this is 10bp, meaning that AmpliGone will assume a read is related to a primer position if it starts or ends within 10bp of the primer position. This value can be changed with the --fragment-lookaround-size flag.","title":"Fragmented"},{"location":"amplicon-types/#why-is-a-more-common-terminology-not-used","text":"Because we quickly found out that more common terminology such as paired-end/single-end, or short/long read, doesn't always convey the information that AmpliGone needs in a single keyword or argument. And information such as a sequencing platform doesn't always convey this information either. As an example: it's most common that primers are only present on one side of a read if the sequencing was performed with \"short reads\" on an Illumina platform. But that's not necessarily always the case , because depending on the actual experiment setup the primers might actually be on both ends of those short reads. With AmpliGone we wanted a way to actually get the information that is required and matches with an experiment design, without the user having to give multiple pieces of information through various command-line arguments.","title":"Why is a more common terminology not used?"},{"location":"changelog/","text":"Changelog \u00b6 1.2.0 (2022-12-20) \u00b6 Features \u00b6 add support for fragmented amplicon reads with the --amplicon-type fragmented mode ( 9d5559b ) Bug Fixes \u00b6 only check the last file extension to see for a fastq or bam file (fixes check for file with multiple dots in the filename) ( 386fb1f ) print the correct coordinates when a primer is found multiple times on the reverse strand ( 420438c ) Documentation \u00b6 update docstrings ( c8af27a ) update readme ( 0287408 ) update user documentation to include the new \"fragmented\" amplicon-type ( 159366e ) 1.1.0 (2022-08-11) \u00b6 Features \u00b6 output some basic stats in the log ( c5ad032 ) use rich as a logging handler to improve logging with timestamps and various information levels. ( c5ad032 ) Dependencies \u00b6 add rich as a dependency ( c5ad032 ) change parmap version to lenient version 1.5.x ( 0c4d2a5 ) remove tqdm as a dependency ( c5ad032 ) update mappy to latest version 2.24 ( efed0a1 ) update pandas to >=1.3 ( efed0a1 ) update parmap to latest version 1.5.3 ( efed0a1 ) update pysam to lenient version 0.19.* ( efed0a1 ) updated environment recipe and setup.py to newest dependencies ( efed0a1 ) 1.0.3 (2022-07-12) \u00b6 Bug Fixes \u00b6 ci: Use other access key in order to trigger publishing workflow ( 384625e ) 1.0.2 (2022-07-12) \u00b6 Bug Fixes \u00b6 Fix cutting reverse primers too short ( a01c69d ) FWSet and RVSet are now different objects ( a28d629 ) Documentation \u00b6 ci: update mkdocs config to support tabbed content ( bdfb52d ) restructured user guide page, clarified some sections and added many more example commands for reference ( d723b97 ) rewritten installation page with clarified instructions and added conda instructions ( 271a0a8 ) update documentation site landing page ( 45a3fca ) update readme with quick installation instructions ( bdfb52d ) 1.0.1 (2022-04-14) \u00b6 Continuous Integration \u00b6 update github actions workflow, split package upload to separate workflow ( 77c13a1 ) 1.0.0 (2022-04-14) \u00b6 \u26a0 BREAKING CHANGES \u00b6 Export BED file of cut primers Features \u00b6 Add support for BED file input ( eaa60a0 ) Export BED file of cut primers ( f51d222 ) Bug Fixes \u00b6 Add seq and revseq to coordinatelist ( eb27331 ) Fix parsing error rate from cli ( 28976f2 ) Fix parsing of \".\" in score column ( cc6913b ) Fix running fasta2bed script ( f8545a4 ) Output empty bed if no primers are found ( ca67b0b ) Dependencies \u00b6 update all python versions mentions to 3.8 ( 89ced9c ) Documentation \u00b6 add docstrings to AmpliGone.mappreset ( 6d9c32c ) add docstrings to functions in AmpliGone.AmpliGone ( 54a0a01 ) add docstrings to functions in AmpliGone.fasta2bed ( ea2d5c6 ) add docstrings to functions in AmpliGone.io_ops ( d9c60ae ) Update installation instructions ( fbb7e0e ) Update user guide ( 071e71f ) 0.4.3 (2022-02-03) \u00b6 Bug Fixes \u00b6 remove unnecessary print statement ( c7bd712 ) Documentation \u00b6 add --error-rate flag to user guide documentation ( 9db3848 ) 0.4.2 (2022-02-03) \u00b6 Features \u00b6 allow the primer-search error rate to be set by the user ( fddd94a ) 0.4.1 (2022-02-02) \u00b6 Bug Fixes \u00b6 don't report duplicate coordinates of same primer when ambiguity-primers are given ( f5449e2 ) use Nonetypes instead of string \"None\" ( f5449e2 ) 0.4.0 (2022-01-27) \u00b6 Features \u00b6 find coordinates of primers with mismatches to reference ( d6bf925 ) Bug Fixes \u00b6 consistently remove reverse primers in end-to-end mode ( 0c4f621 ) Fix cutting too many bases ( 78bd9ea ) Make number of iterations variable ( 62ac2d7 ) Documentation \u00b6 update installation instructions and include primer-search changes ( 5fdc6fa ) 0.3.3 (2021-12-08) \u00b6 Bug Fixes \u00b6 solve preset-sampling crash when less than 3 input reads are provided ( 29d5624 ) solve reference before assignment error in end-to-mid mode ( 14c9d24 ) 0.3.2 (2021-11-26) \u00b6 Bug Fixes \u00b6 report removed coordinates from all iterations ( f726e9a ) 0.3.1 (2021-11-25) \u00b6 Bug Fixes \u00b6 Distinguish (mis)match and cut soft clips ( d4132c1 ) Performance Improvements \u00b6 Add minimap scoring to presets ( 11158e5 ) 0.3.0 (2021-11-17) \u00b6 Features \u00b6 Use CIGAR strings to cut end-to-end ( ebd2684 ) Bug Fixes \u00b6 Fix typo in 75e792fa8d69746 ( eca004b ) only return data that got an alignment-hit ( f9e64e8 ) Performance Improvements \u00b6 Improved (fastq)data loading speed ( 9d1ae23 ) Documentation \u00b6 Fix comment in cut_read function ( b920738 ) update docs to match new primer removal process ( 035be92 ) update readme ( 95ff984 ) 0.2.3 (2021-10-28) \u00b6 Bug Fixes \u00b6 set correct exit code when -to flag is given ( 5a93ff0 ) 0.2.2 (2021-10-27) \u00b6 Bug Fixes \u00b6 add missing primer-orientation keywords ( 41a84e6 ) exit cleanly when primers aren't found ( #11 ) ( e927591 ) Exit cleanly with empty input ( #12 ) ( 35aae65 ) Documentation \u00b6 update user-guide to include newly added flag ( 4d28ac1 ) 0.2.1 (2021-10-25) \u00b6 Documentation \u00b6 add changelog link ( 4b62a92 )","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#120-2022-12-20","text":"","title":"1.2.0 (2022-12-20)"},{"location":"changelog/#features","text":"add support for fragmented amplicon reads with the --amplicon-type fragmented mode ( 9d5559b )","title":"Features"},{"location":"changelog/#bug-fixes","text":"only check the last file extension to see for a fastq or bam file (fixes check for file with multiple dots in the filename) ( 386fb1f ) print the correct coordinates when a primer is found multiple times on the reverse strand ( 420438c )","title":"Bug Fixes"},{"location":"changelog/#documentation","text":"update docstrings ( c8af27a ) update readme ( 0287408 ) update user documentation to include the new \"fragmented\" amplicon-type ( 159366e )","title":"Documentation"},{"location":"changelog/#110-2022-08-11","text":"","title":"1.1.0 (2022-08-11)"},{"location":"changelog/#features_1","text":"output some basic stats in the log ( c5ad032 ) use rich as a logging handler to improve logging with timestamps and various information levels. ( c5ad032 )","title":"Features"},{"location":"changelog/#dependencies","text":"add rich as a dependency ( c5ad032 ) change parmap version to lenient version 1.5.x ( 0c4d2a5 ) remove tqdm as a dependency ( c5ad032 ) update mappy to latest version 2.24 ( efed0a1 ) update pandas to >=1.3 ( efed0a1 ) update parmap to latest version 1.5.3 ( efed0a1 ) update pysam to lenient version 0.19.* ( efed0a1 ) updated environment recipe and setup.py to newest dependencies ( efed0a1 )","title":"Dependencies"},{"location":"changelog/#103-2022-07-12","text":"","title":"1.0.3 (2022-07-12)"},{"location":"changelog/#bug-fixes_1","text":"ci: Use other access key in order to trigger publishing workflow ( 384625e )","title":"Bug Fixes"},{"location":"changelog/#102-2022-07-12","text":"","title":"1.0.2 (2022-07-12)"},{"location":"changelog/#bug-fixes_2","text":"Fix cutting reverse primers too short ( a01c69d ) FWSet and RVSet are now different objects ( a28d629 )","title":"Bug Fixes"},{"location":"changelog/#documentation_1","text":"ci: update mkdocs config to support tabbed content ( bdfb52d ) restructured user guide page, clarified some sections and added many more example commands for reference ( d723b97 ) rewritten installation page with clarified instructions and added conda instructions ( 271a0a8 ) update documentation site landing page ( 45a3fca ) update readme with quick installation instructions ( bdfb52d )","title":"Documentation"},{"location":"changelog/#101-2022-04-14","text":"","title":"1.0.1 (2022-04-14)"},{"location":"changelog/#continuous-integration","text":"update github actions workflow, split package upload to separate workflow ( 77c13a1 )","title":"Continuous Integration"},{"location":"changelog/#100-2022-04-14","text":"","title":"1.0.0 (2022-04-14)"},{"location":"changelog/#breaking-changes","text":"Export BED file of cut primers","title":"\u26a0 BREAKING CHANGES"},{"location":"changelog/#features_2","text":"Add support for BED file input ( eaa60a0 ) Export BED file of cut primers ( f51d222 )","title":"Features"},{"location":"changelog/#bug-fixes_3","text":"Add seq and revseq to coordinatelist ( eb27331 ) Fix parsing error rate from cli ( 28976f2 ) Fix parsing of \".\" in score column ( cc6913b ) Fix running fasta2bed script ( f8545a4 ) Output empty bed if no primers are found ( ca67b0b )","title":"Bug Fixes"},{"location":"changelog/#dependencies_1","text":"update all python versions mentions to 3.8 ( 89ced9c )","title":"Dependencies"},{"location":"changelog/#documentation_2","text":"add docstrings to AmpliGone.mappreset ( 6d9c32c ) add docstrings to functions in AmpliGone.AmpliGone ( 54a0a01 ) add docstrings to functions in AmpliGone.fasta2bed ( ea2d5c6 ) add docstrings to functions in AmpliGone.io_ops ( d9c60ae ) Update installation instructions ( fbb7e0e ) Update user guide ( 071e71f )","title":"Documentation"},{"location":"changelog/#043-2022-02-03","text":"","title":"0.4.3 (2022-02-03)"},{"location":"changelog/#bug-fixes_4","text":"remove unnecessary print statement ( c7bd712 )","title":"Bug Fixes"},{"location":"changelog/#documentation_3","text":"add --error-rate flag to user guide documentation ( 9db3848 )","title":"Documentation"},{"location":"changelog/#042-2022-02-03","text":"","title":"0.4.2 (2022-02-03)"},{"location":"changelog/#features_3","text":"allow the primer-search error rate to be set by the user ( fddd94a )","title":"Features"},{"location":"changelog/#041-2022-02-02","text":"","title":"0.4.1 (2022-02-02)"},{"location":"changelog/#bug-fixes_5","text":"don't report duplicate coordinates of same primer when ambiguity-primers are given ( f5449e2 ) use Nonetypes instead of string \"None\" ( f5449e2 )","title":"Bug Fixes"},{"location":"changelog/#040-2022-01-27","text":"","title":"0.4.0 (2022-01-27)"},{"location":"changelog/#features_4","text":"find coordinates of primers with mismatches to reference ( d6bf925 )","title":"Features"},{"location":"changelog/#bug-fixes_6","text":"consistently remove reverse primers in end-to-end mode ( 0c4f621 ) Fix cutting too many bases ( 78bd9ea ) Make number of iterations variable ( 62ac2d7 )","title":"Bug Fixes"},{"location":"changelog/#documentation_4","text":"update installation instructions and include primer-search changes ( 5fdc6fa )","title":"Documentation"},{"location":"changelog/#033-2021-12-08","text":"","title":"0.3.3 (2021-12-08)"},{"location":"changelog/#bug-fixes_7","text":"solve preset-sampling crash when less than 3 input reads are provided ( 29d5624 ) solve reference before assignment error in end-to-mid mode ( 14c9d24 )","title":"Bug Fixes"},{"location":"changelog/#032-2021-11-26","text":"","title":"0.3.2 (2021-11-26)"},{"location":"changelog/#bug-fixes_8","text":"report removed coordinates from all iterations ( f726e9a )","title":"Bug Fixes"},{"location":"changelog/#031-2021-11-25","text":"","title":"0.3.1 (2021-11-25)"},{"location":"changelog/#bug-fixes_9","text":"Distinguish (mis)match and cut soft clips ( d4132c1 )","title":"Bug Fixes"},{"location":"changelog/#performance-improvements","text":"Add minimap scoring to presets ( 11158e5 )","title":"Performance Improvements"},{"location":"changelog/#030-2021-11-17","text":"","title":"0.3.0 (2021-11-17)"},{"location":"changelog/#features_5","text":"Use CIGAR strings to cut end-to-end ( ebd2684 )","title":"Features"},{"location":"changelog/#bug-fixes_10","text":"Fix typo in 75e792fa8d69746 ( eca004b ) only return data that got an alignment-hit ( f9e64e8 )","title":"Bug Fixes"},{"location":"changelog/#performance-improvements_1","text":"Improved (fastq)data loading speed ( 9d1ae23 )","title":"Performance Improvements"},{"location":"changelog/#documentation_5","text":"Fix comment in cut_read function ( b920738 ) update docs to match new primer removal process ( 035be92 ) update readme ( 95ff984 )","title":"Documentation"},{"location":"changelog/#023-2021-10-28","text":"","title":"0.2.3 (2021-10-28)"},{"location":"changelog/#bug-fixes_11","text":"set correct exit code when -to flag is given ( 5a93ff0 )","title":"Bug Fixes"},{"location":"changelog/#022-2021-10-27","text":"","title":"0.2.2 (2021-10-27)"},{"location":"changelog/#bug-fixes_12","text":"add missing primer-orientation keywords ( 41a84e6 ) exit cleanly when primers aren't found ( #11 ) ( e927591 ) Exit cleanly with empty input ( #12 ) ( 35aae65 )","title":"Bug Fixes"},{"location":"changelog/#documentation_6","text":"update user-guide to include newly added flag ( 4d28ac1 )","title":"Documentation"},{"location":"changelog/#021-2021-10-25","text":"","title":"0.2.1 (2021-10-25)"},{"location":"changelog/#documentation_7","text":"add changelog link ( 4b62a92 )","title":"Documentation"},{"location":"installation/","text":"Installation instructions \u00b6 AmpliGone is only available on Linux (or Linux-based) operating systems. MacOS may also work but is not tested. AmpliGone will not work on Windows. AmpliGone can be installed easily with Conda or pip . Installation with conda \u00b6 AmpliGone releases are published in Bioconda, and can be installed with the following command: conda install -c bioconda ampligone Tip You can also use mamba as a replacement for installing conda packages, use the following command if you have mamba installed on your system mamba install -c bioconda ampligone Installation through conda/mamba is the recommended method for installing AmpliGone Installation with pip \u00b6 AmpliGone releases are also published on PyPI , and can be installed using pip using the following command: pip install AmpliGone Download and installation from source \u00b6 Make a new Conda environment before continuing If you have Conda installed on your system, please create and activate a new environment before continuing. Use the following command to create and activate a new Conda environment named \"AmpliGone\" based on the environment-recipe we provide in the github-repository conda env create -f env.yml ; conda activate AmpliGone The \"AmpliGone\" conda-environment should now be active First start by cloning the repository and make sure you're on the latest released version of AmpliGone, then install the downloaded package with pip: # clone the repository from github and switch to the latest released version git clone https://github.com/RIVM-bioinformatics/AmpliGone.git ; cd AmpliGone ; git checkout tags/ $( git tag --sort = committerdate | tail -1 ) >> /dev/null # Install the downloaded package with pip pip install . AmpliGone should now be installed! You can verify if installation was successful by typing ampligone --version on the command-line, this should show the installed AmpliGone version. Pipeline/workflow integration \u00b6 You can easily integrate AmpliGone in your SnakeMake or Nextflow bioinformatics workflow if you use Conda environments in your workflow. To do this, add ampligone and the correct channels to your conda-environment recipe as below: name : example-env channels : - bioconda - conda-forge - anaconda - defaults dependencies : - ampligone Conda will now install AmpliGone and its dependencies in the specified snakemake conda-environment.","title":"Installation"},{"location":"installation/#installation-instructions","text":"AmpliGone is only available on Linux (or Linux-based) operating systems. MacOS may also work but is not tested. AmpliGone will not work on Windows. AmpliGone can be installed easily with Conda or pip .","title":"Installation instructions"},{"location":"installation/#installation-with-conda","text":"AmpliGone releases are published in Bioconda, and can be installed with the following command: conda install -c bioconda ampligone Tip You can also use mamba as a replacement for installing conda packages, use the following command if you have mamba installed on your system mamba install -c bioconda ampligone Installation through conda/mamba is the recommended method for installing AmpliGone","title":"Installation with conda"},{"location":"installation/#installation-with-pip","text":"AmpliGone releases are also published on PyPI , and can be installed using pip using the following command: pip install AmpliGone","title":"Installation with pip"},{"location":"installation/#download-and-installation-from-source","text":"Make a new Conda environment before continuing If you have Conda installed on your system, please create and activate a new environment before continuing. Use the following command to create and activate a new Conda environment named \"AmpliGone\" based on the environment-recipe we provide in the github-repository conda env create -f env.yml ; conda activate AmpliGone The \"AmpliGone\" conda-environment should now be active First start by cloning the repository and make sure you're on the latest released version of AmpliGone, then install the downloaded package with pip: # clone the repository from github and switch to the latest released version git clone https://github.com/RIVM-bioinformatics/AmpliGone.git ; cd AmpliGone ; git checkout tags/ $( git tag --sort = committerdate | tail -1 ) >> /dev/null # Install the downloaded package with pip pip install . AmpliGone should now be installed! You can verify if installation was successful by typing ampligone --version on the command-line, this should show the installed AmpliGone version.","title":"Download and installation from source"},{"location":"installation/#pipelineworkflow-integration","text":"You can easily integrate AmpliGone in your SnakeMake or Nextflow bioinformatics workflow if you use Conda environments in your workflow. To do this, add ampligone and the correct channels to your conda-environment recipe as below: name : example-env channels : - bioconda - conda-forge - anaconda - defaults dependencies : - ampligone Conda will now install AmpliGone and its dependencies in the specified snakemake conda-environment.","title":"Pipeline/workflow integration"},{"location":"user-guide/","text":"User Guide \u00b6 AmpliGone works with both reads in FASTQ format, as well as aligned data in BAM-format. However, when data is presented in the BAM-format then only read-data (sequence and quality scores) will be used. Other data present in the BAM-format will not be used in this version of AmpliGone. Currently, AmpliGone supports Nanopore data and Illumina data. The Illumina platform (NextSeq/MiSeq/HiSeq/other) does not matter. It is however important that you know the read-length in relation to the amplicon length. AmpliGone expects this information in the form of an 'amplicon-type'. Please see this page for more information regarding supported amplicon-types. Preparing input data \u00b6 For optimal results we ask you to format your inputs to make sure you get the best results in your analysis. It is required that adapters/barcodes have been removed from your sequencing reads before they are processed by AmpliGone. Processing read-data with adapters/barcodes still attached to your reads may result in inaccurate output data. Additionally, AmpliGone works best with reads that have already been processed by quality filtering tools such as fastp or Trimmomatic . Primers \u00b6 AmpliGone has two options for primer input: BED and fasta . The BED format specifies the coordinates of the primers with respect to the given reference genome. If this is the format you use, you can skip to Primer Orientation When the primers are supplied in fasta format, AmpliGone searches for the primer coordinates based on the given reference. By default, mismatches are tolerated for up to 10% (0.1) of the length of the primer sequence. It's therefore important that the given primers adequately match the given reference, otherwise the primer-coordinates cannot be determined. If necessary, you can adjust the maximum amount of differences (substitutions) which are tolerated to be either more lenient or stringent. You can do so by giving the --error-rate / -er flag in your command, followed by a decimal number. For example --error-rate 0.15 can be used to make the search more lenient. Please see the usage examples to see this flag in combination with other settings for AmpliGone. Primer Orientation \u00b6 AmpliGone determines whether a given sequence is considered to be a 'forward primer' or a 'reverse primer'. This information is taken from the name of a primer sequence in the FASTA header with specific keywords, the usable keywords are as follows: Usable keywords Example fasta Forward primers Reverse primers LEFT RIGHT PLUS MINUS POSITIVE NEGATIVE FORWARD REVERSE >primer_1_LEFT ACTGGC >primer_1_RIGHT TGGCTCA >primer_2_FORWARD ACAATTCG >primer_2_REVERSE TATTAAGC The primer sequences may contain IUPAC ambiguity nucleotides, though be aware that this may result in differently found coordinates as expected depending on your experiments. Reference \u00b6 Unlike the primer sequences, AmpliGone currently only supports a reference sequence that does not contain IUPAC ambiguity nucleotides. This may change in a future version. Exporting found primer coordinates \u00b6 In a downstream analysis you might want to know which primers have actually been removed from which coordinates by AmpliGone. AmpliGone can provide you with this information with the --export-primers {file} flag, replace {file} with your desired output file. Using this flag will give you a BED-file with found primer coordinates as in the example below: ref start end name score strand NC_045512.2 30 54 primer_1_LEFT . + NC_045512.2 385 410 primer_1_RIGHT . - NC_045512.2 320 342 primer_2_LEFT . + NC_045512.2 704 726 primer_2_RIGHT . - Please see the usage examples to see this flag in combination with other settings for AmpliGone. Using multiple threads \u00b6 AmpliGone is multi-threaded by design, as it splits your input data to process over the amount of threads which are available for use. Therefore, AmpliGone scales (almost) linearly when given more threads. A computer with a lot of computing power is therefore advised. AmpliGone defaults to the amount of threads which are available in your system. (if the CPU of your computer has 24 threads, AmpliGone will use all 24 threads by default) You can use the --threads or -t flag to set a different number of threads to use. Basic usage examples \u00b6 End-to-end amplicons End-to-mid amplicons Fragmented amplicons Here you can find various examples to remove primers from \"end-to-end\" amplicon data. Please check what an \"end-to-end\" amplicon is here before continuing. Basic primer removal with a Fasta-file as primer-input The primers in this command are provided in Fasta format. The default setting for a primer-mismatches (10%) will be used as no other value is provided in this command. Aside from basic logging messages, AmpliGone will not output any additional data such as removed primer coordinates. The flag --threads is not provided in this command, AmpliGone will therefore use all available threads on the system. ampligone \\ --input input.fastq \\ --output output.fastq \\ --reference reference.fasta \\ --primers primers.fasta \\ --amplicon-type end-to-end Basic primer removal with a BED-file as primer-input The primers in this command are provided in BED format. The default setting for a primer-mismatches (10%) will be used as no other value is provided in this command. Aside from basic logging messages, AmpliGone will not output any additional data such as removed primer coordinates. The flag --threads 6 is given in this command, AmpliGone will therefore use only 6 threads. ampligone \\ --input input.fastq \\ --output output.fastq \\ --reference reference.fasta \\ --primers primer_information.bed \\ --amplicon-type end-to-end \\ --threads 6 Primer removal with a BED-file as primer-input and exporting removed primers The primers in this command are provided in BED format. The default setting for a primer-mismatches (10%) will be used as no other value is provided in this command. AmpliGone will output both basic logging messages as an extra output file containing the found and removed primer coordinates in BED format. The flag --threads 8 is given in this command, AmpliGone will therefore use only 8 threads. ampligone \\ --input input.fastq \\ --output output.fastq \\ --reference reference.fasta \\ --primers primer_information.bed \\ --amplicon-type end-to-end \\ --export-primers removed_primers.bed \\ --threads 8 Primer removal with a Fasta-file as primer-input, using a custom primer mismatch rate and exporting removed primers The primers in this command are provided in Fasta format. The flag --error-rate 0.2 is given in this command, meaning that a primer mismatch rate of 20% will be tolerated by AmpliGone instead of the default 10% AmpliGone will output both basic logging messages as an extra output file containing the found and removed primer coordinates in BED format. The flag --threads 16 is given in this command, AmpliGone will therefore use only 16 threads. ampligone \\ --input input.fastq \\ --output output.fastq \\ --reference reference.fasta \\ --primers primers.fasta \\ --amplicon-type end-to-end \\ --error-rate 0 .2 \\ --export-primers removed_primers.bed \\ --threads 16 Here you can find various examples to remove primers from \"end-to-mid\" amplicon data. Please check what an \"end-to-mid\" amplicon is here before continuing. Basic primer removal with a Fasta-file as primer-input The primers in this command are provided in Fasta format. The default setting for a primer-mismatches (10%) will be used as no other value is provided in this command. Aside from basic logging messages, AmpliGone will not output any additional data such as removed primer coordinates. The flag --threads is not provided in this command, AmpliGone will therefore use all available threads on the system. ampligone \\ --input input.fastq \\ --output output.fastq \\ --reference reference.fasta \\ --primers primers.fasta \\ --amplicon-type end-to-mid Basic primer removal with a BED-file as primer-input The primers in this command are provided in BED format. The default setting for a primer-mismatches (10%) will be used as no other value is provided in this command. Aside from basic logging messages, AmpliGone will not output any additional data such as removed primer coordinates. The flag --threads 6 is given in this command, AmpliGone will therefore use only 6 threads. ampligone \\ --input input.fastq \\ --output output.fastq \\ --reference reference.fasta \\ --primers primer_information.bed \\ --amplicon-type end-to-mid \\ --threads 6 Primer removal with a BED-file as primer-input and exporting removed primers The primers in this command are provided in BED format. The default setting for a primer-mismatches (10%) will be used as no other value is provided in this command. AmpliGone will output both basic logging messages as an extra output file containing the found and removed primer coordinates in BED format. The flag --threads 8 is given in this command, AmpliGone will therefore use only 8 threads. ampligone \\ --input input.fastq \\ --output output.fastq \\ --reference reference.fasta \\ --primers primer_information.bed \\ --amplicon-type end-to-mid \\ --export-primers removed_primers.bed \\ --threads 8 Primer removal with a Fasta-file as primer-input, using a custom primer mismatch rate and exporting removed primers The primers in this command are provided in Fasta format. The flag --error-rate 0.2 is given in this command, meaning that a primer mismatch rate of 20% will be tolerated by AmpliGone instead of the default 10% AmpliGone will output both basic logging messages as an extra output file containing the found and removed primer coordinates in BED format. The flag --threads 16 is given in this command, AmpliGone will therefore use only 16 threads. ampligone \\ --input input.fastq \\ --output output.fastq \\ --reference reference.fasta \\ --primers primers.fasta \\ --amplicon-type end-to-mid \\ --error-rate 0 .2 \\ --export-primers removed_primers.bed \\ --threads 16 Here you can find various examples to remove primers from \"fragmented\" amplicon data. Please check what a \"fragmented\" amplicon is here before continuing. Basic primer removal with a Fasta-file as primer-input The primers in this command are provided in Fasta format. The default setting for a primer-mismatches (10%) will be used as no other value is provided in this command. The default setting for a fragment-lookaround-size (10bp) will be used as no other value is provided in this command. Aside from basic logging messages, AmpliGone will not output any additional data such as removed primer coordinates. The flag --threads is not provided in this command, AmpliGone will therefore use all available threads on the system. ampligone \\ --input input.fastq \\ --output output.fastq \\ --reference reference.fasta \\ --primers primers.fasta \\ --amplicon-type fragmented Basic primer removal with a BED-file as primer-input The primers in this command are provided in BED format. The default setting for a primer-mismatches (10%) will be used as no other value is provided in this command. The default setting for a fragment-lookaround-size (10bp) will be used as no other value is provided in this command. Aside from basic logging messages, AmpliGone will not output any additional data such as removed primer coordinates. The flag --threads 6 is given in this command, AmpliGone will therefore use only 6 threads. ampligone \\ --input input.fastq \\ --output output.fastq \\ --reference reference.fasta \\ --primers primer_information.bed \\ --amplicon-type fragmented \\ --threads 6 Primer removal with a BED-file as primer-input, using a custom fragment-lookaround-size and exporting removed primers The primers in this command are provided in BED format. The default setting for a primer-mismatches (10%) will be used as no other value is provided in this command. The flag --fragment-lookaround-size 15 is provided in this command, meaning that fragmentend reads within 15bp of a primer site will be associated with said primer-site and will therefore be cut if necessary. AmpliGone will output both basic logging messages as an extra output file containing the found and removed primer coordinates in BED format. The flag --threads 8 is given in this command, AmpliGone will therefore use only 8 threads. ampligone \\ --input input.fastq \\ --output output.fastq \\ --reference reference.fasta \\ --primers primer_information.bed \\ --amplicon-type fragmented \\ --fragment-lookaround-size 15 \\ --export-primers removed_primers.bed \\ --threads 8 Primer removal with a Fasta-file as primer-input, using a custom primer mismatch rate, a custom fragment-lookaround-size, and exporting removed primers The primers in this command are provided in Fasta format. The flag --error-rate 0.2 is given in this command, meaning that a primer mismatch rate of 20% will be tolerated by AmpliGone instead of the default 10% The flag --fragment-lookaround-size 20 is provided in this command, meaning that fragmentend reads within 20bp of a primer site will be associated with said primer-site and will therefore be cut if necessary. AmpliGone will output both basic logging messages as an extra output file containing the found and removed primer coordinates in BED format. The flag --threads 16 is given in this command, AmpliGone will therefore use only 16 threads. ampligone \\ --input input.fastq \\ --output output.fastq \\ --reference reference.fasta \\ --primers primers.fasta \\ --amplicon-type fragmented \\ --fragment-lookaround-size 20 \\ --error-rate 0 .2 \\ --export-primers removed_primers.bed \\ --threads 16 Using AmpliGone in a pipeline/workflow \u00b6 In pipelines it's often required to that output-files are always created, even if they are empty. AmpliGone has the -to flag for this. Which stands for 'touch-outputs'. When this flag is given, AmpliGone will always create the output-files. Even if AmpliGone would normally fail because of (for example) an empty input file or when primer-sequences couldn't be found on the reference. Please use with caution Using the -to flag will ensure that output-files are always created. But because of this, common errors may go unnoticed more easily. Please test your experiment setup manually before integrating it in a pipeline","title":"User guide"},{"location":"user-guide/#user-guide","text":"AmpliGone works with both reads in FASTQ format, as well as aligned data in BAM-format. However, when data is presented in the BAM-format then only read-data (sequence and quality scores) will be used. Other data present in the BAM-format will not be used in this version of AmpliGone. Currently, AmpliGone supports Nanopore data and Illumina data. The Illumina platform (NextSeq/MiSeq/HiSeq/other) does not matter. It is however important that you know the read-length in relation to the amplicon length. AmpliGone expects this information in the form of an 'amplicon-type'. Please see this page for more information regarding supported amplicon-types.","title":"User Guide"},{"location":"user-guide/#preparing-input-data","text":"For optimal results we ask you to format your inputs to make sure you get the best results in your analysis. It is required that adapters/barcodes have been removed from your sequencing reads before they are processed by AmpliGone. Processing read-data with adapters/barcodes still attached to your reads may result in inaccurate output data. Additionally, AmpliGone works best with reads that have already been processed by quality filtering tools such as fastp or Trimmomatic .","title":"Preparing input data"},{"location":"user-guide/#primers","text":"AmpliGone has two options for primer input: BED and fasta . The BED format specifies the coordinates of the primers with respect to the given reference genome. If this is the format you use, you can skip to Primer Orientation When the primers are supplied in fasta format, AmpliGone searches for the primer coordinates based on the given reference. By default, mismatches are tolerated for up to 10% (0.1) of the length of the primer sequence. It's therefore important that the given primers adequately match the given reference, otherwise the primer-coordinates cannot be determined. If necessary, you can adjust the maximum amount of differences (substitutions) which are tolerated to be either more lenient or stringent. You can do so by giving the --error-rate / -er flag in your command, followed by a decimal number. For example --error-rate 0.15 can be used to make the search more lenient. Please see the usage examples to see this flag in combination with other settings for AmpliGone.","title":"Primers"},{"location":"user-guide/#primer-orientation","text":"AmpliGone determines whether a given sequence is considered to be a 'forward primer' or a 'reverse primer'. This information is taken from the name of a primer sequence in the FASTA header with specific keywords, the usable keywords are as follows: Usable keywords Example fasta Forward primers Reverse primers LEFT RIGHT PLUS MINUS POSITIVE NEGATIVE FORWARD REVERSE >primer_1_LEFT ACTGGC >primer_1_RIGHT TGGCTCA >primer_2_FORWARD ACAATTCG >primer_2_REVERSE TATTAAGC The primer sequences may contain IUPAC ambiguity nucleotides, though be aware that this may result in differently found coordinates as expected depending on your experiments.","title":"Primer Orientation"},{"location":"user-guide/#reference","text":"Unlike the primer sequences, AmpliGone currently only supports a reference sequence that does not contain IUPAC ambiguity nucleotides. This may change in a future version.","title":"Reference"},{"location":"user-guide/#exporting-found-primer-coordinates","text":"In a downstream analysis you might want to know which primers have actually been removed from which coordinates by AmpliGone. AmpliGone can provide you with this information with the --export-primers {file} flag, replace {file} with your desired output file. Using this flag will give you a BED-file with found primer coordinates as in the example below: ref start end name score strand NC_045512.2 30 54 primer_1_LEFT . + NC_045512.2 385 410 primer_1_RIGHT . - NC_045512.2 320 342 primer_2_LEFT . + NC_045512.2 704 726 primer_2_RIGHT . - Please see the usage examples to see this flag in combination with other settings for AmpliGone.","title":"Exporting found primer coordinates"},{"location":"user-guide/#using-multiple-threads","text":"AmpliGone is multi-threaded by design, as it splits your input data to process over the amount of threads which are available for use. Therefore, AmpliGone scales (almost) linearly when given more threads. A computer with a lot of computing power is therefore advised. AmpliGone defaults to the amount of threads which are available in your system. (if the CPU of your computer has 24 threads, AmpliGone will use all 24 threads by default) You can use the --threads or -t flag to set a different number of threads to use.","title":"Using multiple threads"},{"location":"user-guide/#basic-usage-examples","text":"End-to-end amplicons End-to-mid amplicons Fragmented amplicons Here you can find various examples to remove primers from \"end-to-end\" amplicon data. Please check what an \"end-to-end\" amplicon is here before continuing. Basic primer removal with a Fasta-file as primer-input The primers in this command are provided in Fasta format. The default setting for a primer-mismatches (10%) will be used as no other value is provided in this command. Aside from basic logging messages, AmpliGone will not output any additional data such as removed primer coordinates. The flag --threads is not provided in this command, AmpliGone will therefore use all available threads on the system. ampligone \\ --input input.fastq \\ --output output.fastq \\ --reference reference.fasta \\ --primers primers.fasta \\ --amplicon-type end-to-end Basic primer removal with a BED-file as primer-input The primers in this command are provided in BED format. The default setting for a primer-mismatches (10%) will be used as no other value is provided in this command. Aside from basic logging messages, AmpliGone will not output any additional data such as removed primer coordinates. The flag --threads 6 is given in this command, AmpliGone will therefore use only 6 threads. ampligone \\ --input input.fastq \\ --output output.fastq \\ --reference reference.fasta \\ --primers primer_information.bed \\ --amplicon-type end-to-end \\ --threads 6 Primer removal with a BED-file as primer-input and exporting removed primers The primers in this command are provided in BED format. The default setting for a primer-mismatches (10%) will be used as no other value is provided in this command. AmpliGone will output both basic logging messages as an extra output file containing the found and removed primer coordinates in BED format. The flag --threads 8 is given in this command, AmpliGone will therefore use only 8 threads. ampligone \\ --input input.fastq \\ --output output.fastq \\ --reference reference.fasta \\ --primers primer_information.bed \\ --amplicon-type end-to-end \\ --export-primers removed_primers.bed \\ --threads 8 Primer removal with a Fasta-file as primer-input, using a custom primer mismatch rate and exporting removed primers The primers in this command are provided in Fasta format. The flag --error-rate 0.2 is given in this command, meaning that a primer mismatch rate of 20% will be tolerated by AmpliGone instead of the default 10% AmpliGone will output both basic logging messages as an extra output file containing the found and removed primer coordinates in BED format. The flag --threads 16 is given in this command, AmpliGone will therefore use only 16 threads. ampligone \\ --input input.fastq \\ --output output.fastq \\ --reference reference.fasta \\ --primers primers.fasta \\ --amplicon-type end-to-end \\ --error-rate 0 .2 \\ --export-primers removed_primers.bed \\ --threads 16 Here you can find various examples to remove primers from \"end-to-mid\" amplicon data. Please check what an \"end-to-mid\" amplicon is here before continuing. Basic primer removal with a Fasta-file as primer-input The primers in this command are provided in Fasta format. The default setting for a primer-mismatches (10%) will be used as no other value is provided in this command. Aside from basic logging messages, AmpliGone will not output any additional data such as removed primer coordinates. The flag --threads is not provided in this command, AmpliGone will therefore use all available threads on the system. ampligone \\ --input input.fastq \\ --output output.fastq \\ --reference reference.fasta \\ --primers primers.fasta \\ --amplicon-type end-to-mid Basic primer removal with a BED-file as primer-input The primers in this command are provided in BED format. The default setting for a primer-mismatches (10%) will be used as no other value is provided in this command. Aside from basic logging messages, AmpliGone will not output any additional data such as removed primer coordinates. The flag --threads 6 is given in this command, AmpliGone will therefore use only 6 threads. ampligone \\ --input input.fastq \\ --output output.fastq \\ --reference reference.fasta \\ --primers primer_information.bed \\ --amplicon-type end-to-mid \\ --threads 6 Primer removal with a BED-file as primer-input and exporting removed primers The primers in this command are provided in BED format. The default setting for a primer-mismatches (10%) will be used as no other value is provided in this command. AmpliGone will output both basic logging messages as an extra output file containing the found and removed primer coordinates in BED format. The flag --threads 8 is given in this command, AmpliGone will therefore use only 8 threads. ampligone \\ --input input.fastq \\ --output output.fastq \\ --reference reference.fasta \\ --primers primer_information.bed \\ --amplicon-type end-to-mid \\ --export-primers removed_primers.bed \\ --threads 8 Primer removal with a Fasta-file as primer-input, using a custom primer mismatch rate and exporting removed primers The primers in this command are provided in Fasta format. The flag --error-rate 0.2 is given in this command, meaning that a primer mismatch rate of 20% will be tolerated by AmpliGone instead of the default 10% AmpliGone will output both basic logging messages as an extra output file containing the found and removed primer coordinates in BED format. The flag --threads 16 is given in this command, AmpliGone will therefore use only 16 threads. ampligone \\ --input input.fastq \\ --output output.fastq \\ --reference reference.fasta \\ --primers primers.fasta \\ --amplicon-type end-to-mid \\ --error-rate 0 .2 \\ --export-primers removed_primers.bed \\ --threads 16 Here you can find various examples to remove primers from \"fragmented\" amplicon data. Please check what a \"fragmented\" amplicon is here before continuing. Basic primer removal with a Fasta-file as primer-input The primers in this command are provided in Fasta format. The default setting for a primer-mismatches (10%) will be used as no other value is provided in this command. The default setting for a fragment-lookaround-size (10bp) will be used as no other value is provided in this command. Aside from basic logging messages, AmpliGone will not output any additional data such as removed primer coordinates. The flag --threads is not provided in this command, AmpliGone will therefore use all available threads on the system. ampligone \\ --input input.fastq \\ --output output.fastq \\ --reference reference.fasta \\ --primers primers.fasta \\ --amplicon-type fragmented Basic primer removal with a BED-file as primer-input The primers in this command are provided in BED format. The default setting for a primer-mismatches (10%) will be used as no other value is provided in this command. The default setting for a fragment-lookaround-size (10bp) will be used as no other value is provided in this command. Aside from basic logging messages, AmpliGone will not output any additional data such as removed primer coordinates. The flag --threads 6 is given in this command, AmpliGone will therefore use only 6 threads. ampligone \\ --input input.fastq \\ --output output.fastq \\ --reference reference.fasta \\ --primers primer_information.bed \\ --amplicon-type fragmented \\ --threads 6 Primer removal with a BED-file as primer-input, using a custom fragment-lookaround-size and exporting removed primers The primers in this command are provided in BED format. The default setting for a primer-mismatches (10%) will be used as no other value is provided in this command. The flag --fragment-lookaround-size 15 is provided in this command, meaning that fragmentend reads within 15bp of a primer site will be associated with said primer-site and will therefore be cut if necessary. AmpliGone will output both basic logging messages as an extra output file containing the found and removed primer coordinates in BED format. The flag --threads 8 is given in this command, AmpliGone will therefore use only 8 threads. ampligone \\ --input input.fastq \\ --output output.fastq \\ --reference reference.fasta \\ --primers primer_information.bed \\ --amplicon-type fragmented \\ --fragment-lookaround-size 15 \\ --export-primers removed_primers.bed \\ --threads 8 Primer removal with a Fasta-file as primer-input, using a custom primer mismatch rate, a custom fragment-lookaround-size, and exporting removed primers The primers in this command are provided in Fasta format. The flag --error-rate 0.2 is given in this command, meaning that a primer mismatch rate of 20% will be tolerated by AmpliGone instead of the default 10% The flag --fragment-lookaround-size 20 is provided in this command, meaning that fragmentend reads within 20bp of a primer site will be associated with said primer-site and will therefore be cut if necessary. AmpliGone will output both basic logging messages as an extra output file containing the found and removed primer coordinates in BED format. The flag --threads 16 is given in this command, AmpliGone will therefore use only 16 threads. ampligone \\ --input input.fastq \\ --output output.fastq \\ --reference reference.fasta \\ --primers primers.fasta \\ --amplicon-type fragmented \\ --fragment-lookaround-size 20 \\ --error-rate 0 .2 \\ --export-primers removed_primers.bed \\ --threads 16","title":"Basic usage examples"},{"location":"user-guide/#using-ampligone-in-a-pipelineworkflow","text":"In pipelines it's often required to that output-files are always created, even if they are empty. AmpliGone has the -to flag for this. Which stands for 'touch-outputs'. When this flag is given, AmpliGone will always create the output-files. Even if AmpliGone would normally fail because of (for example) an empty input file or when primer-sequences couldn't be found on the reference. Please use with caution Using the -to flag will ensure that output-files are always created. But because of this, common errors may go unnoticed more easily. Please test your experiment setup manually before integrating it in a pipeline","title":"Using AmpliGone in a pipeline/workflow"}]}