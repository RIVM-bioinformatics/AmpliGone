{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AmpliGone \u00b6 AmpliGone is a tool which accurately finds and removes primer sequences from NGS reads in an amplicon experiment. In contrast to a lot of other primer-removal tools, AmpliGone does not actively look for primer sequences within the NGS reads. Instead, reads are trimmed based on primer sequence coordinates in relation to a given reference sequence. Additionally, AmpliGone is able to compensate for, and therefore properly clean, reads that start or end outside of a primer-region as this is a common occurrence in amplicon-based sequencing data. AmpliGone is build and tested with Nanopore and Illumina data (fastq) in mind and supports both 'end-to-end' as well as 'end-to-mid' amplicons to be cleaned. Please see this page to learn more about this terminology. AmpliGone is available under the AGPLv3 licence","title":"Home"},{"location":"#ampligone","text":"AmpliGone is a tool which accurately finds and removes primer sequences from NGS reads in an amplicon experiment. In contrast to a lot of other primer-removal tools, AmpliGone does not actively look for primer sequences within the NGS reads. Instead, reads are trimmed based on primer sequence coordinates in relation to a given reference sequence. Additionally, AmpliGone is able to compensate for, and therefore properly clean, reads that start or end outside of a primer-region as this is a common occurrence in amplicon-based sequencing data. AmpliGone is build and tested with Nanopore and Illumina data (fastq) in mind and supports both 'end-to-end' as well as 'end-to-mid' amplicons to be cleaned. Please see this page to learn more about this terminology. AmpliGone is available under the AGPLv3 licence","title":"AmpliGone"},{"location":"amplicon-types/","text":"Amplicon Types \u00b6 AmpliGone requires user information when it comes to the 'amplicon type'. This describes the length of a PCR amplicon, and which part of said amplicon is actually sequenced. This information is required because it tells AmpliGone from which side(s) of a read the primer-sequence has to be removed. The given options are \"End-to-End\" and \"End-to-Mid\". End-to-End \u00b6 An \"End-to-End\" amplicon type describes the situation where a read covers the full length of an amplicon. This is most prominent in, but not exclusive to, long read sequencing platforms such as Nanopore. In this case of an \"End-to-End\" amplicon type, primers need to be removed from both ends of a read. When given the \"End-to-End\" amplicon type, AmpliGone follows the logic that both forward and reverse reads should start at a forward-primer and stop at a reverse-primer. The orientation of the reads doesn't matter in this case. End-to-Mid \u00b6 An \"End-to-Mid\" amplicon type describes the situation where a reads cover the amplicon only partially, and partially overlap in the amplicon mid-point. This is most prominent in, but not exclusive to, short read Illumina sequencing. In this case of an \"End-to-Mid\" amplicon type, primers need to be removed from only one end of a read. When given the \"End-to-Mid\" amplicon type, AmpliGone follows the logic that a forward-read may only start at a forward-primer. And a reverse-read may only start at at a reverse-primer. Why is a more common terminology not used? \u00b6 Because we quickly found out that more common terminology such as paired-end/single-end, or short/long read, doesn't always convey the information that AmpliGone needs in a single keyword or argument. And information such as a sequencing platform doesn't always convey this information either. As an example: it's most common that primers are only present on one side of a read if the sequencing was performed with \"short reads\" on an Illumina platform. But that's not necessarily always the case , because depending on the actual experiment setup the primers might actually be on both ends of those short reads. With AmpliGone we wanted a way to actually get the information that is required and matches with an experiment design, without the user having to give multiple pieces of information through various command-line arguments.","title":"Amplicon types"},{"location":"amplicon-types/#amplicon-types","text":"AmpliGone requires user information when it comes to the 'amplicon type'. This describes the length of a PCR amplicon, and which part of said amplicon is actually sequenced. This information is required because it tells AmpliGone from which side(s) of a read the primer-sequence has to be removed. The given options are \"End-to-End\" and \"End-to-Mid\".","title":"Amplicon Types"},{"location":"amplicon-types/#end-to-end","text":"An \"End-to-End\" amplicon type describes the situation where a read covers the full length of an amplicon. This is most prominent in, but not exclusive to, long read sequencing platforms such as Nanopore. In this case of an \"End-to-End\" amplicon type, primers need to be removed from both ends of a read. When given the \"End-to-End\" amplicon type, AmpliGone follows the logic that both forward and reverse reads should start at a forward-primer and stop at a reverse-primer. The orientation of the reads doesn't matter in this case.","title":"End-to-End"},{"location":"amplicon-types/#end-to-mid","text":"An \"End-to-Mid\" amplicon type describes the situation where a reads cover the amplicon only partially, and partially overlap in the amplicon mid-point. This is most prominent in, but not exclusive to, short read Illumina sequencing. In this case of an \"End-to-Mid\" amplicon type, primers need to be removed from only one end of a read. When given the \"End-to-Mid\" amplicon type, AmpliGone follows the logic that a forward-read may only start at a forward-primer. And a reverse-read may only start at at a reverse-primer.","title":"End-to-Mid"},{"location":"amplicon-types/#why-is-a-more-common-terminology-not-used","text":"Because we quickly found out that more common terminology such as paired-end/single-end, or short/long read, doesn't always convey the information that AmpliGone needs in a single keyword or argument. And information such as a sequencing platform doesn't always convey this information either. As an example: it's most common that primers are only present on one side of a read if the sequencing was performed with \"short reads\" on an Illumina platform. But that's not necessarily always the case , because depending on the actual experiment setup the primers might actually be on both ends of those short reads. With AmpliGone we wanted a way to actually get the information that is required and matches with an experiment design, without the user having to give multiple pieces of information through various command-line arguments.","title":"Why is a more common terminology not used?"},{"location":"installation/","text":"Installation instructions \u00b6 AmpliGone is only available on Linux (or Linux-based) operating systems. MacOS may also work but is not tested. AmpliGone will not work on Windows. AmpliGone will be made available for installation through Conda and pip. However, this is currently not yet working. We will update these docs when installation through Conda and/or pip is available. Prerequisites \u00b6 AmpliGone requires Python 3.7 or later to be installed on your system (or in an environment). Other dependencies will be installed during the installation, you don't have to install them manually. These extra dependencies are as follows: pysam>=0.16 pandas>=1.2.3 numpy>=1.20 mappy>=2.17 biopython>=1.78 parmap>=1.5.2 tqdm>=4.59.0 We strongly advise you to use a conda environment (or similar) to make sure there won't be any conflicts in package dependencies. Download and install from source \u00b6 First start by cloning the repository and making sure you're on version 0.2.0 as per this documentation: git clone https://github.com/RIVM-bioinformatics/AmpliGone.git ; cd AmpliGone ; git checkout tags/v0.2.0 You're now in the newly created \"AmpliGone\" directory. Make a new Conda environment before continuing If you have Conda installed on your system, please create and activate a new environment before continuing. Use the following command to create and activate a new Conda environment named \"AmpliGone\" based on the environment-recipe we provide in the github-repository conda env create -f env.yml ; conda activate AmpliGone The \"AmpliGone\" conda-environment should now be active You can now install AmpliGone via the following command: pip install . AmpliGone should now be installed! You can verify if installation was successful by typing ampligone --version on the command-line, this should show the installed AmpliGone version. Pipeline/workflow integration \u00b6 You can easily integrate AmpliGone in your snakemake bioinformatics workflow if you use Conda environments in your workflow. To do this, simply add the following structure to your conda-environment recipe, replace {VERSION} with the AmpliGone version you wish to use: dependencies : - pip - pip : - git+https://github.com/RIVM-bioinformatics/AmpliGone.git@{VERSION} Conda will now install AmpliGone and its dependencies in the specified snakemake conda-environment.","title":"Installation"},{"location":"installation/#installation-instructions","text":"AmpliGone is only available on Linux (or Linux-based) operating systems. MacOS may also work but is not tested. AmpliGone will not work on Windows. AmpliGone will be made available for installation through Conda and pip. However, this is currently not yet working. We will update these docs when installation through Conda and/or pip is available.","title":"Installation instructions"},{"location":"installation/#prerequisites","text":"AmpliGone requires Python 3.7 or later to be installed on your system (or in an environment). Other dependencies will be installed during the installation, you don't have to install them manually. These extra dependencies are as follows: pysam>=0.16 pandas>=1.2.3 numpy>=1.20 mappy>=2.17 biopython>=1.78 parmap>=1.5.2 tqdm>=4.59.0 We strongly advise you to use a conda environment (or similar) to make sure there won't be any conflicts in package dependencies.","title":"Prerequisites"},{"location":"installation/#download-and-install-from-source","text":"First start by cloning the repository and making sure you're on version 0.2.0 as per this documentation: git clone https://github.com/RIVM-bioinformatics/AmpliGone.git ; cd AmpliGone ; git checkout tags/v0.2.0 You're now in the newly created \"AmpliGone\" directory. Make a new Conda environment before continuing If you have Conda installed on your system, please create and activate a new environment before continuing. Use the following command to create and activate a new Conda environment named \"AmpliGone\" based on the environment-recipe we provide in the github-repository conda env create -f env.yml ; conda activate AmpliGone The \"AmpliGone\" conda-environment should now be active You can now install AmpliGone via the following command: pip install . AmpliGone should now be installed! You can verify if installation was successful by typing ampligone --version on the command-line, this should show the installed AmpliGone version.","title":"Download and install from source"},{"location":"installation/#pipelineworkflow-integration","text":"You can easily integrate AmpliGone in your snakemake bioinformatics workflow if you use Conda environments in your workflow. To do this, simply add the following structure to your conda-environment recipe, replace {VERSION} with the AmpliGone version you wish to use: dependencies : - pip - pip : - git+https://github.com/RIVM-bioinformatics/AmpliGone.git@{VERSION} Conda will now install AmpliGone and its dependencies in the specified snakemake conda-environment.","title":"Pipeline/workflow integration"},{"location":"user-guide/","text":"User Guide \u00b6 AmpliGone works with both reads in FASTQ format, as well as aligned data in BAM-format. However, when data is presented in the BAM-format then only read-data (sequence and quality scores) will be used. Other data present in the BAM-format will not be used in this version of AmpliGone. Currently, AmpliGone supports Nanopore data and Illumina data. The Illumina platform (NextSeq/MiSeq/HiSeq/other) does not matter. It is however important that you know the read-length in relation to the amplicon length. AmpliGone expects this information in the form of an 'amplicon-type'. Please see this page for more information regarding supported amplicon-types. Preparing input data \u00b6 For optimal results we ask you to format your inputs to make sure you get the best results in your analysis. AmpliGone works best with reads that have already been processed by quality filtering tools such as fastp or Trimmomatic . Additionally, its best that sequencing adapters/barcodes have already been removed. Though this is not a requirement . AmpliGone is not designed to remove adapter/barcode data, nor is it really meant for this purpose. That being said, AmpliGone removes data from a certain end of a read, which also includes adapter data if its there. Primers \u00b6 AmpliGone searches for the primer coordinates based on the given reference. So if a primer sequence is given that cannot be matched to the given reference then the coordinates which have to be removed cannot be determined. It's therefore important that the primers and the reference match eachother. AmpliGone determines whether a given sequence is considered to be a 'forward primer' or a 'reverse primer'. This information is taken from the name of a primer sequence in the FASTA header with specific keywords, the usable keywords are as follows: Forward primers \"LEFT\" \"PLUS\" \"POSITIVE\" \"FORWARD\" Reverse primers \"RIGHT\" \"MINUS\" \"NEGATIVE\" \"REVERSE\" Example >primer_1_LEFT ACTGGC >primer_2_RIGHT GATTCA The primer sequences may contain IUPAC ambiguity nucleotides. Reference \u00b6 Unlike the primer sequences, AmpliGone currently only supports a reference that do not contain IUPAC ambiguity nucleotides. This may change in a future version. Basic usage example \u00b6 Example 1 : removing primers from Nanopore \"end-to-end\"-amplicon reads, using 8 threads: ampligone \\ --input input.fastq \\ --output output.fastq \\ --reference reference.fasta \\ --primers primers.fasta \\ --amplicon-type end-to-end \\ --threads 8 Example 2 : removing primers from Illumina \"end-to-mid\"-amplicon reads, using 12 threads: ampligone \\ --input input.fastq \\ --output output.fastq \\ --reference reference.fasta \\ --primers primers.fasta \\ --amplicon-type end-to-mid \\ --threads 12 Exporting found primer coordinates \u00b6 In a downstream analysis you might want to know which primers have actually been removed from which coordinates by AmpliGone. AmpliGone can provide you with this information with the --export-primers {file} flag, replace {file} with your desired output file. Using this flag will give you a CSV-file with found primer coordinates as in the example below: name start stop primer_1_LEFT 30 54 primer_1_RIGHT 385 410 primer_2_LEFT 320 342 primer_2_RIGHT 704 726 Example command ampligone \\ --input input.fastq \\ --output output.fastq \\ --reference reference.fasta \\ --primers primers.fasta \\ --amplicon-type end-to-end \\ --export-primers removed_coordinates.csv \\ --threads 12 Using multiple threads \u00b6 AmpliGone is multi-threaded by design, as it splits your input data to process over the amount of threads which are available for use. Therefore, AmpliGone scales (almost) linearly when given more threads. A computer with a lot of computing power is therefore advised. AmpliGone defaults to the amount of threads which are available in your system. (if the CPU of your computer has 24 threads, AmpliGone will use all 24 threads by default) You can use the --threads or -t flag to set a different number of threads to use.","title":"User guide"},{"location":"user-guide/#user-guide","text":"AmpliGone works with both reads in FASTQ format, as well as aligned data in BAM-format. However, when data is presented in the BAM-format then only read-data (sequence and quality scores) will be used. Other data present in the BAM-format will not be used in this version of AmpliGone. Currently, AmpliGone supports Nanopore data and Illumina data. The Illumina platform (NextSeq/MiSeq/HiSeq/other) does not matter. It is however important that you know the read-length in relation to the amplicon length. AmpliGone expects this information in the form of an 'amplicon-type'. Please see this page for more information regarding supported amplicon-types.","title":"User Guide"},{"location":"user-guide/#preparing-input-data","text":"For optimal results we ask you to format your inputs to make sure you get the best results in your analysis. AmpliGone works best with reads that have already been processed by quality filtering tools such as fastp or Trimmomatic . Additionally, its best that sequencing adapters/barcodes have already been removed. Though this is not a requirement . AmpliGone is not designed to remove adapter/barcode data, nor is it really meant for this purpose. That being said, AmpliGone removes data from a certain end of a read, which also includes adapter data if its there.","title":"Preparing input data"},{"location":"user-guide/#primers","text":"AmpliGone searches for the primer coordinates based on the given reference. So if a primer sequence is given that cannot be matched to the given reference then the coordinates which have to be removed cannot be determined. It's therefore important that the primers and the reference match eachother. AmpliGone determines whether a given sequence is considered to be a 'forward primer' or a 'reverse primer'. This information is taken from the name of a primer sequence in the FASTA header with specific keywords, the usable keywords are as follows: Forward primers \"LEFT\" \"PLUS\" \"POSITIVE\" \"FORWARD\" Reverse primers \"RIGHT\" \"MINUS\" \"NEGATIVE\" \"REVERSE\" Example >primer_1_LEFT ACTGGC >primer_2_RIGHT GATTCA The primer sequences may contain IUPAC ambiguity nucleotides.","title":"Primers"},{"location":"user-guide/#reference","text":"Unlike the primer sequences, AmpliGone currently only supports a reference that do not contain IUPAC ambiguity nucleotides. This may change in a future version.","title":"Reference"},{"location":"user-guide/#basic-usage-example","text":"Example 1 : removing primers from Nanopore \"end-to-end\"-amplicon reads, using 8 threads: ampligone \\ --input input.fastq \\ --output output.fastq \\ --reference reference.fasta \\ --primers primers.fasta \\ --amplicon-type end-to-end \\ --threads 8 Example 2 : removing primers from Illumina \"end-to-mid\"-amplicon reads, using 12 threads: ampligone \\ --input input.fastq \\ --output output.fastq \\ --reference reference.fasta \\ --primers primers.fasta \\ --amplicon-type end-to-mid \\ --threads 12","title":"Basic usage example"},{"location":"user-guide/#exporting-found-primer-coordinates","text":"In a downstream analysis you might want to know which primers have actually been removed from which coordinates by AmpliGone. AmpliGone can provide you with this information with the --export-primers {file} flag, replace {file} with your desired output file. Using this flag will give you a CSV-file with found primer coordinates as in the example below: name start stop primer_1_LEFT 30 54 primer_1_RIGHT 385 410 primer_2_LEFT 320 342 primer_2_RIGHT 704 726 Example command ampligone \\ --input input.fastq \\ --output output.fastq \\ --reference reference.fasta \\ --primers primers.fasta \\ --amplicon-type end-to-end \\ --export-primers removed_coordinates.csv \\ --threads 12","title":"Exporting found primer coordinates"},{"location":"user-guide/#using-multiple-threads","text":"AmpliGone is multi-threaded by design, as it splits your input data to process over the amount of threads which are available for use. Therefore, AmpliGone scales (almost) linearly when given more threads. A computer with a lot of computing power is therefore advised. AmpliGone defaults to the amount of threads which are available in your system. (if the CPU of your computer has 24 threads, AmpliGone will use all 24 threads by default) You can use the --threads or -t flag to set a different number of threads to use.","title":"Using multiple threads"}]}